variables:
  TF_VERSION: 0.14.9
  # DO_ACCESS_TOKEN: <your digitalocean access token>
  # DO_REGION: nyc1
  # DO_SIZE: s-1vcpu-1gb
  # DO_IMAGE: ubuntu-20-04-x64
  # DO_SSH_KEY: <your digitalocean ssh key fingerprint>
  # TF_VAR_do_token: $DO_ACCESS_TOKEN
  # TF_VAR_do_region: $DO_REGION
  # TF_VAR_do_size: $DO_SIZE
  # TF_VAR_do_image: $DO_IMAGE
  # TF_VAR_do_ssh_key: $DO_SSH_KEY


before_script:
  - apt-get update && apt-get install -y unzip
  - curl -LO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
  - unzip terraform_${TF_VERSION}_linux_amd64.zip
  - mv terraform /usr/local/bin/


  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  
   # Create the SSH directory and give it the right permissions
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  ## Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIV_KEY" | tr -d '\r' | ssh-add -
stages:
  - plan
  - apply
  - destroy

terraform:
  stage: plan
  script:
    - terraform init
    - terraform validate
    - terraform plan -var-file=terraform.tfvars -out=tfplan
  artifacts:
    paths:
      - tfplan

terraform_apply:
  stage: apply
  script:
    - terraform apply -auto-approve tfplan
  environment:
    name: my-environment
    on_stop: stop_terraform

terraform_destroy:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  environment:
    name: my-environment
    action: stop

stop_terraform:
  stage: stop
  script:
    - terraform state pull > terraform.tfstate
    - terraform destroy -auto-approve
  when: manual