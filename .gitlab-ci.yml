include:
  - project: "to-be-continuous/terraform"
    ref: "3.6.3"
    file: "/templates/gitlab-ci-terraform.yml"
  - project: "to-be-continuous/ansible"
    ref: "3.5.1"
    file: "/templates/gitlab-ci-ansible.yml"
variables:
  # non-secret AWS variables
  # AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY & AWS_DEFAULT_REGION are defined as secret GitLab CI variables
  # Terraform
  TF_PROJECT_DIR: "terraform"
  TF_STAGING_ENABLED: "true"
  TF_PROD_ENABLED: "false"
  TF_VAR_ssh_pub_key_file: '$ssh_pub_key_file'
  #file is defined as secret GitLab CI variables (declares 'ssh_pub_key_file' Terraform variable)
  TF_TFSEC_ENABLED: "false"
  TF_CHECKOV_ENABLED: "false"
  # Ansible
  ANSIBLE_PROJECT_DIR: "ansible"
  # use inventory generated by my Terraform script
  ANSIBLE_DEFAULT_INVENTORY: "$CI_PROJECT_DIR/terraform/tf-output/ansible_inventory"
  # ANSIBLE_STAGING_PLAYBOOK_FILE: "playbook.yml"
  ANSIBLE_PROD_PLAYBOOK_FILE: "playbook.yml"
  ANSIBLE_LINT_DISABLED: "true"
  ANSIBLE_PRIVATE_KEY: '$ANSIBLE_PRIVATE_KEY' # is defined as secret GitLab CI variables
  # set env url using Terraform generated env
  ANSIBLE_ENVIRONMENT_URL: "http://${tf_public_dns}"

stages:
  - build
  - test
  - infra
  - deploy
  - acceptance
  - publish
  - infra-prod
  - production

# override tfsec to allow failure
tf-tfsec:
  rules:
    # exclude merge requests
    - if: '$CI_MERGE_REQUEST_ID'
      when: never
    - if: $CI_COMMIT_REF_NAME # useless but prevents GitLab from warning
      allow_failure: true

# override checkov to allow failure
tf-checkov:
  rules:
    # exclude merge requests
    - if: '$CI_MERGE_REQUEST_ID'
      when: never
    - if: $CI_COMMIT_REF_NAME # useless but prevents GitLab from warning
      allow_failure: true
